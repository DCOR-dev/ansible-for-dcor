- name: Setup automated image compression
  block:
    - name: Install imagemagick
      ansible.builtin.apt:
        name: imagemagick
        state: latest

    - name: Setup cron job for image compression
      ansible.builtin.template:
        src: "etc_cron_image_resize.j2"
        dest: /etc/cron.d/dcor-image-resize
        owner: root
        group: root
        mode: '0644'

- name: Setup DCOR nightly jobs
  ansible.builtin.template:
    src: "etc_cron_dcor_jobs.j2"
    dest: "/etc/cron.d/dcor-{{ ckan_command }}"
    owner: root
    group: root
    mode: '0644'
  loop:
    - "run-jobs-dcor-depot"
    - "run-jobs-dcor-schemas"
    - "run-jobs-dc-view"
    - "run-jobs-dc-serve"
  loop_control:
    loop_var: ckan_command
    index_var: cron_hour

- name: Setup DCOR nightly cleanup/pruning
  ansible.builtin.template:
    src: "etc_cron_dcor_prune.j2"
    dest: "/etc/cron.d/dcor-{{ ckan_command }}"
    owner: root
    group: root
    mode: '0644'
  loop:
    - "dcor-prune-stale-multipart-uploads"
    - "dcor-prune-draft-datasets"
    # The following is too dangerous and should only be done manually
    # when the maintainer knows that the database is intact!
    # - "dcor-prune-orphaned-s3-artifacts"
  loop_control:
    loop_var: ckan_command
    index_var: cron_hour

- name: Weekly purge all datasets for development instances
  ansible.builtin.template:
    src: "etc_cron_dcor_reset.j2"
    dest: "/etc/cron.d/dcor-reset"
    owner: root
    group: root
    mode: '0644'
  when: DCOR_DEVELOP | bool

- name: Setup automated encrypted database bacá¸±ups
  block:
    - name: Install gpg
      ansible.builtin.apt:
        name: gpg

    - name: Create keys directory
      ansible.builtin.file:
        path: "{{ GPG_KEY_DIR }}"
        state: directory
        owner: root
        group: root
        mode: 0700

    - name: Copy keys to host
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ GPG_KEY_DIR }}/"
        owner: "root"
        group: root
        mode: 0600
        remote_src: no
      with_fileglob: "{{ playbook_dir }}/gpg_keys/key_*.pub"

    - name: Find all keys on remote host
      find:
        paths: "{{ GPG_KEY_DIR }}"
        patterns: 'key_*.pub'
        file_type: any
      register: gpg_key_files

    - name: Import keys on host
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: "gpg --import {{ item.path }}"
      loop: "{{ gpg_key_files.files }}"

    - name: Create list of GPG IDs
      set_fact:
        list_gpg_ids: "{{ list_tunnel | default([]) + [item.path | basename | split('_') | last | split('.') | first] }}"
      loop: "{{ gpg_key_files.files }}"

    - name: Create cron job for every key
      ansible.builtin.template:
        src: "etc_cron_dcor_backup.j2"
        dest: "/etc/cron.d/dcor-encrypted-instance-backup-{{ gpg_identifier }}"
        owner: root
        group: root
        mode: '0644'
      loop: "{{ list_gpg_ids }}"
      loop_control:
        loop_var: gpg_identifier
        index_var: backup_cron_tens_minute
  when: DCOR_ENCRYPTED_BACKUPS_ENABLED | bool
