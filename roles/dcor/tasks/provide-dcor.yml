- name: Install libraries and setup directories
  block:
    - name: Install Python tools
      ansible.builtin.apt:
        name:
        - python3-pip
        - python3-dev
        - python3-venv
        - build-essential

    - name: Install mailx for automated emails
      ansible.builtin.apt:
        name: bsd-mailx
      when: EMAIL_SMTP_SERVER != ""

    - name: Create scratch directory
      ansible.builtin.file:
        path: "{{ CACHE_DIR }}"
        state: directory

- name: Setup ckan.ini
  block:
    - name: Fetch CKAN_INI configuration from template
      set_fact:
        ckan_ini_data: "{{ lookup('template', 'ckan_ini.yml.j2') }}"

    - name: Populate CKAN_INI configuration
      community.general.ini_file:
        path: "{{ CKAN_INI }}"
        section: "app:main"
        option: "{{ item.key }}"
        value: "{{ item.value }}"
      with_items:
        # convert to dict and remove items that have empty values
        - "{{ ckan_ini_data | from_yaml | dict2items | rejectattr('value', 'none') }}"

- name: Apply custom branding
  block:
    - name: Apply MPCDF branding
      ansible.builtin.copy:
        src: ckan_templates_mpcdf/
        dest: /var/www/ckan_templates/
        owner: root
        group: www-data
        remote_src: no
      when: "'mpcdf' in group_names"
    - name: Apply MEDICAL branding
      ansible.builtin.copy:
        src: ckan_templates_medical/
        dest: /var/www/ckan_templates/
        owner: root
        group: www-data
        remote_src: no
      when: "'medical' in group_names"

- name: Install DCOR
  block:
    - name: Install DCOR
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          source {{ CKAN_ENVIRONMENT_ACTIVATE }}
          pip install --upgrade pip
          pip install --upgrade wheel
          pip install {{ "--upgrade" if DCOR_DEVELOP | bool == false }} dcor_control

    - name: Run dcor develop
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          source {{ CKAN_ENVIRONMENT_ACTIVATE }}
          dcor develop --yes
      when: DCOR_DEVELOP | bool

    - name: Run dcor inspect
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          source {{ CKAN_ENVIRONMENT_ACTIVATE }}
          dcor inspect --assume-yes

    - name: Install dcor binary
      ansible.builtin.template:
        src: "bin_dcor"
        dest: /usr/bin/dcor
        owner: root
        group: root
        mode: '0700'

    - name: Populate figshare data
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          source {{ CKAN_ENVIRONMENT_ACTIVATE }}
          ckan dcor-import-figshare
      when: DCOR_FIGSHARE_IMPORT | bool

    - name: Make sure storage directory is owned by www-data
      ansible.builtin.file:
        dest: "{{ CKAN_INI_STORAGE_PATH }}"
        owner: www-data
        group: www-data
        recurse: true

  environment:
    CKAN_INI: "{{ CKAN_INI }}"

- name: Copy resource_schema_supplements
  ansible.builtin.copy:
    src: "resource_schema_supplements/{{ item }}"
    dest: "{{ CKAN_INI_DCOR_SCHEMAS_JSON_RESOURCE_SCHEMA_DIRECTORY }}/{{ item }}"
    owner: root
    group: root
    mode: '0644'
    remote_src: no
  loop: "{{ DCOR_ADDITIONAL_RESOURCE_SCHEMA_SUPPLEMENTS }}"

- name: Setup nginx
  block:
    - name: Remove default CKAN nginx configuration
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/ckan
        state: absent

    - name: Copy production robots.txt (only for non-development setups)
      ansible.builtin.copy:
        src: robots.txt
        dest: /var/www/robots.txt
        owner: root
        group: root
        mode: '0644'
        remote_src: no
      when: DCOR_DEVELOP | bool == false

    - name: Add DCOR nginx configuration
      ansible.builtin.template:
        # Depending on whether HTTPS is enabled or not, a different config is used.
        src: "etc_nginx_{{ 'https' if DCOR_HTTPS_ENABLED else 'http_only' }}.conf.j2"
        dest: /etc/nginx/sites-available/dcor
        owner: root
        group: root
        mode: '0644'

    - name: Enable DCOR nginx configuration
      file:
        src: /etc/nginx/sites-available/dcor
        dest: /etc/nginx/sites-enabled/dcor
        state: link

- name: Check if favicon exists
  stat:
    path: "/var/www/dcor-favicon.ico"
  register: favicon_result

- name: Setup favicon
  block:
    - name: Install inkscape and icotools
      ansible.builtin.apt:
        name:
        - icoutils
        - inkscape

    - name: Create favicon
      ansible.builtin.template:
        src: "favicon.svg.j2"
        dest: /var/www/dcor-favicon.svg
        owner: root
        group: root
        mode: '0755'

    - name: Create favicon
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          # favicon
          inkscape /var/www/dcor-favicon.svg -o /var/www/dcor-favicon.png -w 32 -h 32
          icotool /var/www/dcor-favicon.png -c -o /var/www/dcor-favicon.ico
          # additional image files for bookmarks
          inkscape /var/www/dcor-favicon.svg -o /var/www/dcor-076.png -w 76
          inkscape /var/www/dcor-favicon.svg -o /var/www/dcor-096.png -w 96
          inkscape /var/www/dcor-favicon.svg -o /var/www/dcor-152.png -w 152
          inkscape /var/www/dcor-favicon.svg -o /var/www/dcor-180.png -w 152

    - name: Uninstall inkscape and icotools
      ansible.builtin.apt:
        name:
        - icoutils
        - inkscape
        state: absent

  when: not favicon_result.stat.exists

- name: Setup supervisor + uwsgi
  block:
    - name: Stop CKAN via supervisor
      community.general.supervisorctl:
        name: all
        state: stopped

    - name: Add DCOR UWSGI configuration
      ansible.builtin.template:
        src: "etc_uwsgi.ini.j2"
        dest: /etc/ckan/default/ckan-uwsgi.ini
        owner: root
        group: root
        mode: '0644'

    # There has been a lot of fuss about UWSGI and supervisor not working together
    # properly. There could be a conflict about child UWSGI processes still being
    # around and not cleaned up. I had a deadlock where the supervisor process
    # was at 100% CPU and UWSGI not stopping. The `die-on-term` setting in
    # UWSGI together with `SIGTERM` (normal behavior in supervisor) instead of
    # sending `QUIT` (default workaround in CKAN supervisor config) solved this:
    # https://github.com/unbit/uwsgi/issues/296#issuecomment-65894116
    - name: Ensure supervisor sends SIGTERM to UWSGI
      ansible.builtin.lineinfile:
        path: /etc/supervisor/conf.d/ckan-uwsgi.conf
        regexp: '^stopsignal=QUIT'
        line: ";stopsignal=QUIT"

    - name: Ensure supervisor sends SIGTERM to datapusher
      ansible.builtin.lineinfile:
        path: /etc/supervisor/conf.d/ckan-datapusher.conf
        regexp: '^stopsignal=QUIT'
        line: ";stopsignal=QUIT"

    - name: Ensure "die-on-term" is set for datapusher
      community.general.ini_file:
        path: /etc/ckan/datapusher/datapusher-uwsgi.ini
        section: uwsgi
        option: die-on-term
        value: true

    - name: Ensure DCOR workers are defined
      ansible.builtin.template:
        src: "etc_supervisor_workers.conf.j2"
        dest: "/etc/supervisor/conf.d/ckan-worker-dcor-{{ dcor_queue_type }}.conf"
        owner: root
        group: root
        mode: '0644'
      loop:
        - "short"
        - "normal"
        - "long"
      loop_control:
        loop_var: dcor_queue_type

    - name: Restart CKAN via supervisor
      community.general.supervisorctl:
        name: all
        state: restarted

